#ifndef RANSAC
#define RANSAC

#include <iostream>
#include <string>
#include <tuple>
#include <pair>
#include <opencv2/core/core.hpp>
#include "../Frame/frame.hpp"
//#include features descriptor from nicolas ORB
//#include

class Ransac{
  //
  //ransac is going to be applied on pair of KeyPoints matched by ORB
  //
  public :
    long w = 0; // w = inliers / nb_samples
    long w_goal = 0// wanted inlier rate
    uint64_t n = 0; // nb samples necessary ton create a model
    cv::KeyPoint max_error = 0; // maximum accepted error for a point to be defined as an inlier
    cv::mat best_transform ; // tranform matrix generated by best_points
    std::vector< cv::KeyPoint >  best_points ; //point who created the transformation matrix that got the most inliers
    std::vector< std::pair <cv::KeyPoint , cv::KeyPoint> > inliers ; // data points whose reprojection error is under max_eror value
    // USELESS std::vector< <std::pair <cv::KeyPoint , cv::KeyPoint> > outliers ; // data points whose reprojection error is under max_eror value
    std::tuple< <std::vector<cv::KeyPoint> > , < std::vector<cv::KeyPoint> > , < std::vector<cv::DMatch> > > data ; //every data points given to ransac for analysis
    Frame* ptr_frame;

    //ordered map of paired points  points can be either 3D or 2D points with a feature map
    Ransac(std::tuple< <cv::KeyPoint*> , <cv::KeyPoint*> , < cv::DMatch* > > datapoint , uint64_t nb_point , float error , Frame* f);
    ~Ransac(void);

    //whole process of applying ransac on the dataset until we found reliable points
    void apply_ransac();

    //application of the transformation in order to get the inlier
    //returns the number of inlier found
    int check_inliners();

    //create a transform matrix based on a array of n pair of points
    cv::mat transform_from_keypoints(std::vector<cv::Keypoint>);

    void reset(); // reset need values in order to avoid having to destroy and rebuild an object

    cv::mat apply_transform(cv::mat);//apply transform on a given point

    //extract n random cv::KeyPoints from the data to process the data
    cv::KeyPoint* get_n_KeyPoints();

    //to string
    std::ostream& operator<< (std::ostream& os);

    //Allow an easy access of data in form of pairs
    std::pair<cv::keypoint , cv::keypoint> operator[](uint64_t index);


    protected :

    private :

};

#endif
